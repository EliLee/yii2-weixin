<?php
/**
 * Created by PhpStorm.
 * User: lee
 * Date: 2018/8/8
 * Time: 15:52
 */

namespace elilee\wx\kf;


use elilee\wx\accessToken\AccessToken;
use elilee\wx\core\Driver;
use elilee\wx\core\Exception;
use yii\httpclient\Client;

/**
 * 客服助手
 * 需要accessToken
 * 接收/返回json
 * Class Kf
 * @package elilee\wx\kf
 */
class Kf extends Driver
{
    /**
     * 获取客服基本信息
     * http请求方式: GET
     * https://api.weixin.qq.com/cgi-bin/customservice/getkflist?access_token=ACCESS_TOKEN
     * 添加客服账号
     * http请求方式: POST
     * https://api.weixin.qq.com/customservice/kfaccount/add?access_token=ACCESS_TOKEN POST数据示例如下：
        {
        "kf_account" : "test1@test",
        "nickname" : "客服1"
        }
     *
     *
     * 邀请绑定客服帐号
     * http请求方式: POST
     * https://api.weixin.qq.com/customservice/kfaccount/inviteworker?access_token=ACCESS_TOKEN POST数据示例如下：
        {
        "kf_account" : "test1@test",
        "invite_wx" : "test_kfwx"
        }
     *
     * 设置客服信息
     *  http请求方式: POST
     * https://api.weixin.qq.com/customservice/kfaccount/update?access_token=ACCESS_TOKEN POST数据示例如下：
        {
        "kf_account" : "test1@test",
        "nickname" : "客服1"
        }
     *
     *
     * 上传客服头像
     *
     * http请求方式: POST/FORM
        https://api.weixin.qq.com/customservice/kfaccount/uploadheadimg?access_token=ACCESS_TOKEN&kf_account=KFACCOUNT

        调用示例（使用curl命令，用FORM表单方式上传一个多媒体文件）：
        curl -F media=@test.jpg "https://api.weixin.qq.com/customservice/kfaccount/uploadheadimg?access_token=ACCESS_TOKEN&kf_account=KFACCOUNT"
     *  kf_account	完整客服帐号，格式为：帐号前缀@公众号微信号
        media	form-data 中媒体文件标识，有filename、filelength、content-type 等信息，文件大小为5M 以内
     *
     * 删除客服帐号
     *  http请求方式: GET
     * https://api.weixin.qq.com/customservice/kfaccount/del?access_token=ACCESS_TOKEN&kf_account=KFACCOUNT
     *  kf_account	完整客服帐号，格式为：帐号前缀@公众号微信号
     *
     *
     * 客服管理接口返回码说明
     *
     *  0	成功
        65400	API不可用，即没有开通/升级到新版客服功能
        65401	无效客服帐号
        65403	客服昵称不合法
        65404	客服帐号不合法
        65405	帐号数目已达到上限，不能继续添加
        65406	已经存在的客服帐号
        65407	邀请对象已经是该公众号客服
        65408	本公众号已经有一个邀请给该微信
        65409	无效的微信号
        65410	邀请对象绑定公众号客服数达到上限（目前每个微信号可以绑定5个公众号客服帐号）
        65411	该帐号已经有一个等待确认的邀请，不能重复邀请
        65412	该帐号已经绑定微信号，不能进行邀请
        40005	不支持的媒体类型
        40009	媒体文件长度不合法
     */
    /**
     * 增加客服接口[新]
     */
    const API_ADD_KF_URL = 'https://api.weixin.qq.com/customservice/kfaccount/add';
    /**
     * 获取所有客服列表
     */
    const API_LIST_KF_URL = 'https://api.weixin.qq.com/cgi-bin/customservice/getkflist';

    /**
     * 邀请绑定客服账号
     */
    const API_INVITE_KF_URL = 'https://api.weixin.qq.com/customservice/kfaccount/inviteworker';

    /**
     * 删除客服账号接口地址
     */
    const API_DELETE_KF_URL = 'https://api.weixin.qq.com/customservice/kfaccount/del';

    /**
     *更新客服信息
     */
    const API_UPDATE_KF_URL = 'https://api.weixin.qq.com/customservice/kfaccount/update';
    /**
     * 上传头像
     */
    const API_UPLOAD_AVATAR_URL = 'https://api.weixin.qq.com/customservice/kfaccount/uploadheadimg';

    /**
     * 关闭会话接口
     */
    const API_CLOSE_SESSION_URL = 'https://api.weixin.qq.com/customservice/kfsession/close';
    /**
     * 创建会话接口
     */
    const API_CREATE_SESSION_URL = 'https://api.weixin.qq.com/customservice/kfsession/create';
    /**
     * 未接入的会话
     */
    const API_WAIT_SESSION_URL = 'https://api.weixin.qq.com/customservice/kfsession/getwaitcase';
    /**
     * 获取客服会话列表
     */
    const API_KF_SESSION_URL = 'https://api.weixin.qq.com/customservice/kfsession/getsessionlist';
    /**
     * 获取客户会话状态
     */
    const API_CUSTOM_SESSION_URL = 'https://api.weixin.qq.com/customservice/kfsession/getsession';
    /**
     * 获取聊天记录
     */
    const API_MSG_LIST_URL = 'https://api.weixin.qq.com/customservice/msgrecord/getmsglist';

    protected $accessToken = false;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->accessToken = (new AccessToken(['conf'=>$this->conf,'httpClient'=>$this->httpClient]))->getToken();
    }

    /**
     * 新增客服账号
     * @param $account 完整客服账号 格式为 找好前缀@公众号微信号
     * @param $nickname
     * @return bool
     * @throws Exception
     */
    public function add($account, $nickname){
        $this->httpClient->formatters = ['uncodeJson'=>'elilee\wx\helper\JsonFormatter'];
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_ADD_KF_URL."?access_token={$this->accessToken}")
            ->setFormat('uncodeJson')
            ->setMethod('post')
            ->setData([
                'kf_account'=>$account,
                'nickname'=>$nickname
            ])
            ->send();
        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $data = $response->getData();

        if(isset($data['errcode']) && $data['errcode'] !=0){
            throw new Exception($data['errmsg']);
        }

        return true;
    }

    /**
     * 获取客服列表
     * @return mixed
     * @throws Exception
     */
    public function ls(){

        $response = $this->httpClient->createRequest()
                ->setUrl(self::API_LIST_KF_URL."?access_token=".$this->accessToken)
                /*->setData([
                    'access_token'=>$this->accessToken
                ])*/
                ->setFormat(Client::FORMAT_JSON)
                ->setMethod('get')
                ->send();

        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $data = $response->getData();
        if(isset($data['errcode']) && $data['errcode'] !=0){
            throw new Exception($data['errmsg']);
        }
        return $data['kf_list'];
    }

    /**
     * 邀请绑定客服账号
     * @param $account 客服账号
     * @param $wxName 微信账号
     * @return bool
     * @throws Exception
     */
    public function invite($account,$wxName){
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_INVITE_KF_URL."?access_token={$this->accessToken}")
            ->setFormat(Client::FORMAT_JSON)
            ->setMethod('post')
            ->setData([
                'kf_account'=>$account,
                'invite_wx'=>$wxName
            ])
            ->send();
        if($response->isOk == false){
            throw new Exception('网络原因');
        }

        $data = $response->getData();

        if(isset($data['errcode']) && $data['errcode'] !=0){
            throw new Exception($data['errmsg']);
        }
        return true;

    }

    /**
     * 删除一个客服
     * @param $account
     * @return bool
     * @throws Exception
     */
    public function delete($account){
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_DELETE_KF_URL."?access_token={$this->accessToken}&kf_account={$account}")
            ->setFormat(Client::FORMAT_JSON)
            ->setMethod('get')
            ->send();
        if($response->isOk == false){
            throw new Exception('网络原因');
        }

        $data = $response->getData();

        if(isset($data['errcode']) && $data['errcode'] !=0){
            throw new Exception($data['errmsg']);
        }
        return true;
    }


    /**
     * 更新客服信息
     * @param $account
     * @param $nickname
     */

    public function update($account,$nickname){
        $this ->httpClient->formatters = ['uncodeJson'=>'elilee\wx\helper\JsonFormatter'];
        $response =$this->httpClient->createRequest()
                ->setUrl(self::API_UP)
                ->setFormat('uncodeJson')
                ->setMethod('post')
                ->setData([
                    'kf_account'=>$account,
                    'nickname'=>$nickname
                ])
                ->send();
        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $data = $response->getData();

        if(isset($data['errcode']) && $data['errcode'] !=0){
            throw new Exception($data['errmsg']);
        }
        return true;
    }

    /**
     * 设置头像
     * @param $account 客服账户名称
     * @param $avatar  头像物理路径名
     * @return bool
     * @throws Exception
     */

    public function avatar($account,$avatar){
        $response =$this->httpClient->createRequest()
            ->setUrl(self::API_UPLOAD_AVATAR_URL."?access_token={$this->accessToken}&kf_account=".$account)
            ->setMethod('post')
            ->addFile('media',$avatar)
            ->send();
        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $result = $response->getData();
        if(isset($result['errcode']) && $result['errcode'] !=0){
            throw new Exception($result['errmsg']);
        }
        return true;
    }

    /**
     * 创建客服绘话
     * @param $account
     * @param $openId
     * @return bool
     * @throws Exception
     */

    public function createSession($account,$openId){
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_CREATE_SESSION_URL."?access_token={$this->accessToken}")
            ->setFormat(Client::FORMAT_JSON)
            ->setMethod('post')
            ->setData([
                'kf_account'=>$account,
                'openid'=>$openId
            ])
            ->send();

        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $result = $response->getData();
        if(isset($result['errcode']) && $result['errcode'] !=0){
            throw new Exception($result['errmsg']);
        }
        return true;

    }

    /**
     * 关闭客服绘话
     * @param $account
     * @param $openId
     * @return bool
     * @throws Exception
     */
    public function closeSession($account,$openId){
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_CLOSE_SESSION_URL."?access_token={$this->accessToken}")
            ->setFormat(Client::FORMAT_JSON)
            ->setMethod('post')
            ->setData([
                'kf_account'=>$account,
                'openid'=>$openId
            ])
            ->send();

        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $result = $response->getData();
        if(isset($result['errcode']) && $result['errcode'] !=0){
            throw new Exception($result['errmsg']);
        }
        return true;
    }

    /**
     * 等待session 接口
     * @return mixed
     */
    public function waitingSession(){
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_WAIT_SESSION_URL."?access_token={$this->accessToken}")
            ->setMethod('get')
            ->send();
        return $response->getData();
    }

    /**
     * 获得一个客服当前的所有绘话
     * @param $account
     * @return array
     * @throws Exception
     */
    public function kfSession($account){
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_KF_SESSION_URL."?access_token={$this->accessToken}&kf_account={$account}")
            ->setFormat(Client::FORMAT_JSON)
            ->setMethod('get')
            ->send();

        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $result = $response->getData();

        if(isset($result['errcode']) && $result['errcode'] !=0){
            throw new Exception($result['errmsg']);
        }
        return isset($result['sessionlist']) ? $result['sessionlist'] : [];
    }

    /**
     * 获得一个客户绘话
     * @param $openId
     * @return mixed
     * @throws Exception
     */
    public function customSession($openId){
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_CUSTOM_SESSION_URL."?access_token={$this->accessToken}&openid={$openId}")
            ->setFormat(Client::FORMAT_JSON)
            ->setMethod('get')
            ->send();

        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $result = $response->getData();

        if(isset($result['errcode']) && $result['errcode'] !=0){
            throw new Exception($result['errmsg']);
        }
        return $result;
    }

    /**
     * 查询客服聊天记录
     * @param $start
     * @param $end
     * @param int $msgId
     * @param int $number
     * @return mixed
     * @throws Exception
     */

    public function mgList($start,$end,$msgId=1,$number=10000){
        $response = $this->httpClient->createRequest()
            ->setUrl(self::API_MSG_LIST_URL."?access_token={$this->accessToken}")
            ->setFormat(Client::FORMAT_JSON)
            ->setMethod('post')
            ->setData(['starttime'=>$start,'endtime'=>$end,'msgid'=>$msgId,'number'=>$number])
            ->send();

        if($response->isOk == false){
            throw new Exception('网络问题');
        }
        $result = $response->getData();

        if(isset($result['errcode']) && $result['errcode'] !=0){
            throw new Exception($result['errmsg']);
        }
        return $result;
    }

}